@use "../../theme.scss" as *;

@mixin themeProperty(
	$theme,
	$property,
	$color,
	$additionalPropertiesPositionIsFront,
	$additionalProperties
) {
	@if $additionalPropertiesPositionIsFront {
		#{$property}: unquote(
			$additionalProperties + " " + map-get($theme, $color)
		);
	} @else {
		#{$property}: unquote(
			map-get($theme, $color) + " " + $additionalProperties
		);
	}
}

@mixin theme(
	$property,
	$type,
	$color,
	$additionalPropertiesPositionIsFront: false,
	$additionalProperties: ""
) {
	$light: map-get($theme, "light");
	$dark: map-get($theme, "dark");

	$light-type: map-get($light, $type);
	$dark-type: map-get($dark, $type);

	@include themeProperty(
		$light-type,
		$property,
		$color,
		$additionalPropertiesPositionIsFront,
		$additionalProperties
	);

	@media (prefers-color-scheme: dark) {
		@include themeProperty(
			$dark-type,
			$property,
			$color,
			$additionalPropertiesPositionIsFront,
			$additionalProperties
		);
	}
}

@mixin sizes(
	$property,
	$type,
	$color,
	$additionalPropertiesPositionIsFront: false,
	$additionalProperties: ""
) {
	$mobile: map-get($theme, "mobile");
	$all: map-get($theme, "all");

	$mobile-type: map-get($mobile, $type);
	$all-type: map-get($all, $type);

	@include themeProperty(
		$mobile-type,
		$property,
		$color,
		$additionalPropertiesPositionIsFront,
		$additionalProperties
	);

	@media (prefers-color-scheme: dark) {
		@include themeProperty(
			$all-type,
			$property,
			$color,
			$additionalPropertiesPositionIsFront,
			$additionalProperties
		);
	}
}
